{"ast":null,"code":"import { useRef } from 'react';\nimport { useDidUpdate } from '../use-did-update/use-did-update.js';\n\nfunction useFocusReturn(_ref) {\n  var opened = _ref.opened,\n      transitionDuration = _ref.transitionDuration,\n      _ref$shouldReturnFocu = _ref.shouldReturnFocus,\n      shouldReturnFocus = _ref$shouldReturnFocu === void 0 ? true : _ref$shouldReturnFocu;\n  var lastActiveElement = useRef();\n\n  var returnFocus = function returnFocus() {\n    var _a;\n\n    if (lastActiveElement.current && \"focus\" in lastActiveElement.current && typeof lastActiveElement.current.focus === \"function\") {\n      (_a = lastActiveElement.current) == null ? void 0 : _a.focus();\n    }\n  };\n\n  useDidUpdate(function () {\n    var timeout = -1;\n\n    var clearFocusTimeout = function clearFocusTimeout(event) {\n      if (event.code === \"Tab\") {\n        window.clearTimeout(timeout);\n      }\n    };\n\n    document.addEventListener(\"keydown\", clearFocusTimeout);\n\n    if (opened) {\n      lastActiveElement.current = document.activeElement;\n    } else if (shouldReturnFocus) {\n      timeout = window.setTimeout(returnFocus, transitionDuration + 10);\n    }\n\n    return function () {\n      window.clearTimeout(timeout);\n      document.removeEventListener(\"keydown\", clearFocusTimeout);\n    };\n  }, [opened]);\n  return returnFocus;\n}\n\nexport { useFocusReturn };","map":null,"metadata":{},"sourceType":"module"}