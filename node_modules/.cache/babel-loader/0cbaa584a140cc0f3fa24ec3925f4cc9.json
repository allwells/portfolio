{"ast":null,"code":"import _toConsumableArray from \"/home/allie/Project/client-thecurrent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/allie/Project/client-thecurrent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\n\nfunction useSelectionState() {\n  var initialSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[], []];\n\n  var _useState = useState(initialSelection),\n      _useState2 = _slicedToArray(_useState, 2),\n      selection = _useState2[0],\n      setSelection = _useState2[1];\n\n  var handleSelect = function handleSelect(listIndex, value) {\n    return setSelection(function (currentSelection) {\n      var listSelection = currentSelection[listIndex];\n      var result = listSelection;\n\n      if (typeof value === \"string\") {\n        if (listSelection.includes(value)) {\n          result = listSelection.filter(function (item) {\n            return item !== value;\n          });\n        } else {\n          result = [].concat(_toConsumableArray(listSelection), [value]);\n        }\n      }\n\n      var clone = _toConsumableArray(currentSelection);\n\n      clone[listIndex] = result;\n      return clone;\n    });\n  };\n\n  var handleDeselect = function handleDeselect(listIndex, values) {\n    return setSelection(function (currentSelection) {\n      var clone = _toConsumableArray(currentSelection);\n\n      clone[listIndex] = currentSelection[listIndex].filter(function (item) {\n        return !values.includes(item);\n      });\n      return clone;\n    });\n  };\n\n  var handleDeselectAll = function handleDeselectAll(listIndex) {\n    return setSelection(function (currentSelection) {\n      var clone = _toConsumableArray(currentSelection);\n\n      clone[listIndex] = [];\n      return clone;\n    });\n  };\n\n  var handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll\n  };\n  return [selection, handlers];\n}\n\nexport { useSelectionState };","map":null,"metadata":{},"sourceType":"module"}