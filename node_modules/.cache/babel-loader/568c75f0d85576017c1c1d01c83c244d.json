{"ast":null,"code":"import _regeneratorRuntime from \"/home/allie/Project/client-thecurrent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/home/allie/Project/client-thecurrent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/home/allie/Project/client-thecurrent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useState, useRef, useCallback, useEffect } from 'react';\n\nfunction getFullscreenElement() {\n  var _document = window.document;\n  var fullscreenElement = _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement;\n  return fullscreenElement;\n}\n\nfunction exitFullscreen() {\n  return _exitFullscreen.apply(this, arguments);\n}\n\nfunction _exitFullscreen() {\n  _exitFullscreen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _document;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _document = window.document;\n\n            if (!(typeof _document.exitFullscreen === \"function\")) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", _document.exitFullscreen());\n\n          case 3:\n            if (!(typeof _document.msExitFullscreen === \"function\")) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", _document.msExitFullscreen());\n\n          case 5:\n            if (!(typeof _document.webkitExitFullscreen === \"function\")) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", _document.webkitExitFullscreen());\n\n          case 7:\n            if (!(typeof _document.mozCancelFullScreen === \"function\")) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", _document.mozCancelFullScreen());\n\n          case 9:\n            return _context2.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _exitFullscreen.apply(this, arguments);\n}\n\nfunction enterFullScreen(_x) {\n  return _enterFullScreen.apply(this, arguments);\n}\n\nfunction _enterFullScreen() {\n  _enterFullScreen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(element) {\n    var _a, _b, _c, _d, _element;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _element = element;\n            return _context3.abrupt(\"return\", ((_a = _element.requestFullscreen) == null ? void 0 : _a.call(_element)) || ((_b = _element.msRequestFullscreen) == null ? void 0 : _b.call(_element)) || ((_c = _element.webkitRequestFullscreen) == null ? void 0 : _c.call(_element)) || ((_d = _element.mozRequestFullscreen) == null ? void 0 : _d.call(_element)));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _enterFullScreen.apply(this, arguments);\n}\n\nvar prefixes = [\"\", \"webkit\", \"moz\", \"ms\"];\n\nfunction addEvents(element, _ref2) {\n  var onFullScreen = _ref2.onFullScreen,\n      onError = _ref2.onError;\n  prefixes.forEach(function (prefix) {\n    element.addEventListener(\"\".concat(prefix, \"fullscreenchange\"), onFullScreen);\n    element.addEventListener(\"\".concat(prefix, \"fullscreenerror\"), onError);\n  });\n  return function () {\n    prefixes.forEach(function (prefix) {\n      element.removeEventListener(\"\".concat(prefix, \"fullscreenchange\"), onFullScreen);\n      element.removeEventListener(\"\".concat(prefix, \"fullscreenerror\"), onError);\n    });\n  };\n}\n\nfunction useFullscreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fullscreen = _useState2[0],\n      setFullscreen = _useState2[1];\n\n  var _ref = useRef();\n\n  var handleFullscreenChange = useCallback(function (event) {\n    setFullscreen(event.target === getFullscreenElement());\n  }, [setFullscreen]);\n  var handleFullscreenError = useCallback(function (event) {\n    setFullscreen(false);\n    console.error(\"[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: \".concat(event, \" (\").concat(event.target, \")\"));\n  }, [setFullscreen]);\n  var toggle = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (getFullscreenElement()) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 3;\n            return enterFullScreen(_ref.current);\n\n          case 3:\n            _context.next = 7;\n            break;\n\n          case 5:\n            _context.next = 7;\n            return exitFullscreen();\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []);\n  var ref = useCallback(function (element) {\n    if (element === null) {\n      _ref.current = window.document.documentElement;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n  useEffect(function () {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n\n    return void 0;\n  }, []);\n  return {\n    ref: ref,\n    toggle: toggle,\n    fullscreen: fullscreen\n  };\n}\n\nexport { useFullscreen };","map":null,"metadata":{},"sourceType":"module"}