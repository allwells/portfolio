{"ast":null,"code":"import { fromEntries } from './utils/from-entries/from-entries.js';\nimport { useCss } from './use-css.js';\nimport { useMantineTheme, useMantineThemeStyles } from '../theme/MantineProvider.js';\nimport { mergeClassNames } from './utils/merge-class-names/merge-class-names.js';\n\nfunction createStyles(getCssObjectOrCssObject) {\n  var getCssObject = typeof getCssObjectOrCssObject === \"function\" ? getCssObjectOrCssObject : function () {\n    return getCssObjectOrCssObject;\n  };\n\n  function useStyles(params, options) {\n    var theme = useMantineTheme();\n    var themeStyles = useMantineThemeStyles()[options == null ? void 0 : options.name];\n\n    var _useCss = useCss(),\n        css = _useCss.css,\n        cx = _useCss.cx;\n\n    function createRef(refName) {\n      return \"__mantine-ref-\".concat(refName || \"\");\n    }\n\n    var cssObject = getCssObject(theme, params, createRef);\n\n    var _styles = typeof (options == null ? void 0 : options.styles) === \"function\" ? options == null ? void 0 : options.styles(theme) : (options == null ? void 0 : options.styles) || {};\n\n    var _themeStyles = typeof themeStyles === \"function\" ? themeStyles(theme, params || {}) : themeStyles || {};\n\n    var classes = fromEntries(Object.keys(cssObject).map(function (key) {\n      var mergedStyles = cx(css(cssObject[key]), css(_themeStyles[key]), css(_styles[key]));\n      return [key, mergedStyles];\n    }));\n    return {\n      classes: mergeClassNames(cx, classes, options == null ? void 0 : options.classNames, options == null ? void 0 : options.name),\n      cx: cx,\n      theme: theme\n    };\n  }\n\n  return useStyles;\n}\n\nexport { createStyles };","map":null,"metadata":{},"sourceType":"module"}