{"ast":null,"code":"import React, { forwardRef, useRef } from 'react';\nimport { getDefaultZIndex } from '@mantine/styles';\nimport { SelectScrollArea } from '../SelectScrollArea/SelectScrollArea.js';\nimport useStyles from './SelectDropdown.styles.js';\nimport { Popper } from '../../Popper/Popper.js';\nimport { Paper } from '../../Paper/Paper.js';\nvar SelectDropdown = forwardRef(function (_ref, ref) {\n  var mounted = _ref.mounted,\n      transition = _ref.transition,\n      transitionDuration = _ref.transitionDuration,\n      transitionTimingFunction = _ref.transitionTimingFunction,\n      uuid = _ref.uuid,\n      shadow = _ref.shadow,\n      maxDropdownHeight = _ref.maxDropdownHeight,\n      _ref$withinPortal = _ref.withinPortal,\n      withinPortal = _ref$withinPortal === void 0 ? true : _ref$withinPortal,\n      children = _ref.children,\n      classNames = _ref.classNames,\n      styles = _ref.styles,\n      dropdownComponent = _ref.dropdownComponent,\n      referenceElement = _ref.referenceElement,\n      _ref$direction = _ref.direction,\n      direction = _ref$direction === void 0 ? \"column\" : _ref$direction,\n      onDirectionChange = _ref.onDirectionChange,\n      _ref$switchDirectionO = _ref.switchDirectionOnFlip,\n      switchDirectionOnFlip = _ref$switchDirectionO === void 0 ? false : _ref$switchDirectionO,\n      _ref$zIndex = _ref.zIndex,\n      zIndex = _ref$zIndex === void 0 ? getDefaultZIndex(\"popover\") : _ref$zIndex,\n      _ref$dropdownPosition = _ref.dropdownPosition,\n      dropdownPosition = _ref$dropdownPosition === void 0 ? \"flip\" : _ref$dropdownPosition,\n      __staticSelector = _ref.__staticSelector;\n\n  var _useStyles = useStyles({\n    native: dropdownComponent !== SelectScrollArea\n  }, {\n    classNames: classNames,\n    styles: styles,\n    name: __staticSelector\n  }),\n      classes = _useStyles.classes;\n\n  var previousPlacement = useRef(\"bottom\");\n  return /* @__PURE__ */React.createElement(Popper, {\n    referenceElement: referenceElement,\n    mounted: mounted,\n    transition: transition,\n    transitionDuration: transitionDuration,\n    exitTransitionDuration: 0,\n    transitionTimingFunction: transitionTimingFunction,\n    position: dropdownPosition === \"flip\" ? \"bottom\" : dropdownPosition,\n    withinPortal: withinPortal,\n    zIndex: zIndex,\n    modifiers: [{\n      name: \"preventOverflow\",\n      enabled: false\n    }, {\n      name: \"flip\",\n      enabled: dropdownPosition === \"flip\"\n    }, {\n      name: \"sameWidth\",\n      enabled: true,\n      phase: \"beforeWrite\",\n      requires: [\"computeStyles\"],\n      fn: function fn(_ref2) {\n        var state = _ref2.state;\n        state.styles.popper.width = \"\".concat(state.rects.reference.width, \"px\");\n      },\n      effect: function effect(_ref3) {\n        var state = _ref3.state;\n        state.elements.popper.style.width = \"\".concat(state.elements.reference.offsetWidth, \"px\");\n      }\n    }, {\n      name: \"directionControl\",\n      enabled: true,\n      phase: \"main\",\n      fn: function fn(_ref4) {\n        var state = _ref4.state;\n\n        if (previousPlacement.current !== state.placement) {\n          previousPlacement.current = state.placement;\n          var nextDirection = state.placement === \"top\" ? \"column-reverse\" : \"column\";\n\n          if (direction !== nextDirection && switchDirectionOnFlip) {\n            onDirectionChange && onDirectionChange(nextDirection);\n          }\n        }\n      }\n    }]\n  }, /* @__PURE__ */React.createElement(\"div\", {\n    style: {\n      maxHeight: maxDropdownHeight,\n      display: \"flex\"\n    }\n  }, /* @__PURE__ */React.createElement(Paper, {\n    radius: \"sm\",\n    component: dropdownComponent || \"div\",\n    id: \"\".concat(uuid, \"-items\"),\n    \"aria-labelledby\": \"\".concat(uuid, \"-label\"),\n    role: \"listbox\",\n    className: classes.dropdown,\n    shadow: shadow,\n    ref: ref,\n    onMouseDown: function onMouseDown(event) {\n      return event.preventDefault();\n    }\n  }, /* @__PURE__ */React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: direction,\n      width: \"100%\"\n    }\n  }, children))));\n});\nSelectDropdown.displayName = \"@mantine/core/SelectDropdown\";\nexport { SelectDropdown };","map":null,"metadata":{},"sourceType":"module"}