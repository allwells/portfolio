{"ast":null,"code":"import _slicedToArray from \"/home/allie/Project/client-thecurrent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event.js';\n\nfunction serializeJSON(value) {\n  try {\n    return JSON.stringify(value);\n  } catch (error) {\n    throw new Error(\"@mantine/hooks use-local-storage: Failed to serialize the value\");\n  }\n}\n\nfunction deserializeJSON(value) {\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return value;\n  }\n}\n\nfunction useLocalStorage(_ref) {\n  var key = _ref.key,\n      _ref$defaultValue = _ref.defaultValue,\n      defaultValue = _ref$defaultValue === void 0 ? void 0 : _ref$defaultValue,\n      _ref$deserialize = _ref.deserialize,\n      deserialize = _ref$deserialize === void 0 ? deserializeJSON : _ref$deserialize,\n      _ref$serialize = _ref.serialize,\n      serialize = _ref$serialize === void 0 ? serializeJSON : _ref$serialize;\n\n  var _a;\n\n  var _useState = useState(typeof window !== \"undefined\" && \"localStorage\" in window ? deserialize((_a = window.localStorage.getItem(key)) != null ? _a : void 0) : defaultValue != null ? defaultValue : \"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var setLocalStorageValue = useCallback(function (val) {\n    if (val instanceof Function) {\n      setValue(function (current) {\n        var result = val(current);\n        window.localStorage.setItem(key, serialize(result));\n        return result;\n      });\n    } else {\n      window.localStorage.setItem(key, serialize(val));\n      setValue(val);\n    }\n  }, [key]);\n  useWindowEvent(\"storage\", function (event) {\n    var _a2;\n\n    if (event.storageArea === window.localStorage && event.key === key) {\n      setValue(deserialize((_a2 = event.newValue) != null ? _a2 : void 0));\n    }\n  });\n  useEffect(function () {\n    if (defaultValue !== void 0 && value === void 0) {\n      setLocalStorageValue(defaultValue);\n    }\n  }, [defaultValue, value, setLocalStorageValue]);\n  return [value === void 0 ? defaultValue : value, setLocalStorageValue];\n}\n\nvar useLocalStorageValue = useLocalStorage;\nexport { useLocalStorage, useLocalStorageValue };","map":null,"metadata":{},"sourceType":"module"}