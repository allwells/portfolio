{"ast":null,"code":"import _slicedToArray from \"/home/allie/Project/client-thecurrent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useRef, useState, useEffect } from 'react';\nimport { clamp } from '../utils/clamp/clamp.js';\n\nvar clampUseMovePosition = function clampUseMovePosition(position) {\n  return {\n    x: clamp({\n      min: 0,\n      max: 1,\n      value: position.x\n    }),\n    y: clamp({\n      min: 0,\n      max: 1,\n      value: position.y\n    })\n  };\n};\n\nfunction useMove(onChange, handlers) {\n  var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"ltr\";\n  var ref = useRef();\n  var mounted = useRef(false);\n  var isSliding = useRef(false);\n  var frame = useRef(0);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  useEffect(function () {\n    mounted.current = true;\n  }, []);\n  useEffect(function () {\n    var onScrub = function onScrub(_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n      cancelAnimationFrame(frame.current);\n      frame.current = requestAnimationFrame(function () {\n        if (mounted.current && ref.current) {\n          ref.current.style.userSelect = \"none\";\n          var rect = ref.current.getBoundingClientRect();\n\n          if (rect.width && rect.height) {\n            var _x = clamp({\n              value: (x - rect.left) / rect.width,\n              min: 0,\n              max: 1\n            });\n\n            onChange({\n              x: dir === \"ltr\" ? _x : 1 - _x,\n              y: clamp({\n                value: (y - rect.top) / rect.height,\n                min: 0,\n                max: 1\n              })\n            });\n          }\n        }\n      });\n    };\n\n    var bindEvents = function bindEvents() {\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", stopScrubbing);\n      document.addEventListener(\"touchmove\", onTouchMove);\n      document.addEventListener(\"touchend\", stopScrubbing);\n    };\n\n    var unbindEvents = function unbindEvents() {\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", stopScrubbing);\n      document.removeEventListener(\"touchmove\", onTouchMove);\n      document.removeEventListener(\"touchend\", stopScrubbing);\n    };\n\n    var startScrubbing = function startScrubbing() {\n      if (!isSliding.current && mounted.current) {\n        isSliding.current = true;\n        typeof (handlers == null ? void 0 : handlers.onScrubStart) === \"function\" && handlers.onScrubStart();\n        setActive(true);\n        bindEvents();\n      }\n    };\n\n    var stopScrubbing = function stopScrubbing() {\n      if (isSliding.current && mounted.current) {\n        isSliding.current = false;\n        typeof (handlers == null ? void 0 : handlers.onScrubEnd) === \"function\" && handlers.onScrubEnd();\n        setActive(false);\n        unbindEvents();\n      }\n    };\n\n    var onMouseDown = function onMouseDown(event) {\n      startScrubbing();\n      onMouseMove(event);\n    };\n\n    var onMouseMove = function onMouseMove(event) {\n      return onScrub({\n        x: event.clientX,\n        y: event.clientY\n      });\n    };\n\n    var onTouchStart = function onTouchStart(event) {\n      startScrubbing();\n      event == null ? void 0 : event.preventDefault();\n      onTouchMove(event);\n    };\n\n    var onTouchMove = function onTouchMove(event) {\n      event == null ? void 0 : event.preventDefault();\n      onScrub({\n        x: event.changedTouches[0].clientX,\n        y: event.changedTouches[0].clientY\n      });\n    };\n\n    ref.current.addEventListener(\"mousedown\", onMouseDown);\n    ref.current.addEventListener(\"touchstart\", onTouchStart);\n    return function () {\n      if (ref.current) {\n        ref.current.removeEventListener(\"mousedown\", onMouseDown);\n        ref.current.removeEventListener(\"touchstart\", onTouchStart);\n      }\n    };\n  }, [ref.current, dir]);\n  return {\n    ref: ref,\n    active: active\n  };\n}\n\nexport { clampUseMovePosition, useMove };","map":null,"metadata":{},"sourceType":"module"}