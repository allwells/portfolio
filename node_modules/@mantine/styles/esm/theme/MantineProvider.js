import React, { createContext, useContext } from 'react';
import { Global } from '@emotion/react';
import { DEFAULT_THEME } from './default-theme.js';
import { mergeThemeWithFunctions } from './utils/merge-theme/merge-theme.js';
import { filterProps } from './utils/filter-props/filter-props.js';
import { NormalizeCSS } from './NormalizeCSS.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const MantineProviderContext = createContext({
  theme: DEFAULT_THEME,
  styles: {},
  emotionOptions: { key: "mantine", prepend: true },
  defaultProps: {}
});
function useMantineTheme() {
  var _a;
  return ((_a = useContext(MantineProviderContext)) == null ? void 0 : _a.theme) || DEFAULT_THEME;
}
function useMantineThemeStyles() {
  var _a;
  return ((_a = useContext(MantineProviderContext)) == null ? void 0 : _a.styles) || {};
}
function useMantineEmotionOptions() {
  var _a;
  return ((_a = useContext(MantineProviderContext)) == null ? void 0 : _a.emotionOptions) || { key: "mantine", prepend: true };
}
function useMantineDefaultProps(component, defaultProps, props) {
  var _a, _b;
  const contextProps = ((_b = (_a = useContext(MantineProviderContext)) == null ? void 0 : _a.defaultProps) == null ? void 0 : _b[component]) || {};
  return __spreadValues(__spreadValues(__spreadValues({}, defaultProps), contextProps), filterProps(props));
}
function GlobalStyles() {
  const theme = useMantineTheme();
  return /* @__PURE__ */ React.createElement(Global, {
    styles: {
      "*, *::before, *::after": {
        boxSizing: "border-box"
      },
      body: __spreadProps(__spreadValues({}, theme.fn.fontStyles()), {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
        color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
        lineHeight: theme.lineHeight,
        fontSize: theme.fontSizes.md
      })
    }
  });
}
function MantineProvider({
  theme,
  styles = {},
  defaultProps = {},
  emotionOptions,
  withNormalizeCSS = false,
  withGlobalStyles = false,
  inherit = false,
  children
}) {
  const ctx = useContext(MantineProviderContext);
  const overrides = {
    themeOverride: inherit ? __spreadValues(__spreadValues({}, ctx.theme), theme) : theme,
    emotionOptions: inherit ? __spreadValues(__spreadValues({}, ctx.emotionOptions), emotionOptions) : emotionOptions,
    styles: inherit ? __spreadValues(__spreadValues({}, ctx.styles), styles) : styles,
    defaultProps: inherit ? __spreadValues(__spreadValues({}, ctx.defaultProps), defaultProps) : defaultProps
  };
  return /* @__PURE__ */ React.createElement(MantineProviderContext.Provider, {
    value: {
      theme: mergeThemeWithFunctions(DEFAULT_THEME, overrides.themeOverride),
      styles: overrides.styles,
      emotionOptions: overrides.emotionOptions,
      defaultProps: overrides.defaultProps
    }
  }, withNormalizeCSS && /* @__PURE__ */ React.createElement(NormalizeCSS, null), withGlobalStyles && /* @__PURE__ */ React.createElement(GlobalStyles, null), children);
}
MantineProvider.displayName = "@mantine/core/MantineProvider";

export { MantineProvider, useMantineDefaultProps, useMantineEmotionOptions, useMantineTheme, useMantineThemeStyles };
//# sourceMappingURL=MantineProvider.js.map
